package tn.esprit.innoxpert.Util;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import tn.esprit.innoxpert.Entity.ComplaintCategories;

import java.time.Instant;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

@Service
public class MistralAIService {

    @Value("${mistral.api.key}")
    private String apiKey;


    private static final String MODEL = "mistral-small-latest";
    private static final String API_URL = "https://api.mistral.ai/v1/chat/completions";
    private static final ObjectMapper objectMapper = new ObjectMapper();


    private final RestTemplate restTemplate;

    public MistralAIService(RestTemplate restTemplate) {
        this.restTemplate = restTemplate;
    }

    public Map<String, Object> generateInitialSolution(ComplaintCategories category, String description) {
        String prompt = buildPrompt(category, description);

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        headers.set("Authorization", "Bearer " + apiKey);

        var requestBody = Map.of(
                "model", MODEL,
                "messages", List.of(Map.of("role", "user", "content", prompt)),
                "temperature", 0.7
        );

        HttpEntity<Map<String, Object>> requestEntity = new HttpEntity<>(requestBody, headers);

        try {
            ResponseEntity<Map> response = restTemplate.exchange(
                    API_URL,
                    HttpMethod.POST,
                    requestEntity,
                    Map.class
            );

            String aiResponse = extractAISolution(response.getBody());
            return formatResponse(category, description, aiResponse);
        } catch (Exception e) {
            return Map.of(
                    "status", "error",
                    "category", category.name(),
                    "description", description,
                    "solution", getFallbackSolution(category),
                    "error", e.getMessage()
            );
        }
    }
    private Map<String, Object> formatResponse(ComplaintCategories category, String description, String aiResponse) {
        try {
            // Nettoyage de la r√©ponse
            String cleanJson = aiResponse.replace("```json", "")
                    .replace("```", "")
                    .trim();

            // Parse le JSON
            Map<String, Object> parsedResponse = objectMapper.readValue(
                    cleanJson,
                    new TypeReference<Map<String, Object>>() {}
            );

            // Structure de sortie standardis√©e
            Map<String, Object> response = new LinkedHashMap<>();
            response.put("category", category.name());
            response.put("description", description);
            response.putAll(parsedResponse);
            response.put("timestamp", Instant.now().toString());

            return response;
        } catch (Exception e) {
            return Map.of(
                    "status", "format_error",
                    "category", category.name(),
                    "description", description,
                    "solution", getFallbackSolution(category),
                    "original_response", aiResponse,
                    "error", "Failed to parse AI response"
            );
        }
    }

    private String buildPrompt(ComplaintCategories category, String description) {
        return String.format("""
        üé© **R√¥le :** Concierge IA d'un h√¥tel 5 √©toiles  
        üõéÔ∏è **R√©clamation signal√©e :**  
        - üìå **Cat√©gorie** : %s  
        - üìù **Description** : "%s"  
        
        üéØ **T√¢ches :**  
        1Ô∏è‚É£ V√©rifier si la description est **compr√©hensible et pertinente** par rapport √† la cat√©gorie.  
           - Si elle est **hors sujet ou incoh√©rente**, demander au client de modifier sa r√©clamation ou cr√©er une nouvelle .  
           - Sinon, proposer une solution adapt√©e.  
        
        2Ô∏è‚É£ Si la r√©clamation est valide, g√©n√©rer une r√©ponse **structur√©e** contenant :  
           - ‚úÖ **Une solution imm√©diate**  
           - üí° **Une mesure d'apaisement client**  
           - ‚è≥ **Une √©ch√©ance de r√©solution**  

        üõ† **Format de r√©ponse attendu :**  
        ```
        {
            "status": "valid" | "invalid",
            "message": "...",
            "solution": "...",
            "apaisement": "...",
            "delai": "..."
        }
        ```
    """, getCategoryLabel(category), description);
    }


    private String extractAISolution(Map<String, Object> response) {
        if (response == null || !response.containsKey("choices")) {
            throw new RuntimeException("Invalid AI response");
        }

        List<Map<String, Object>> choices = (List<Map<String, Object>>) response.get("choices");
        Map<String, Object> firstChoice = choices.get(0);
        Map<String, String> message = (Map<String, String>) firstChoice.get("message");

        return message.get("content");
    }

    public String getFallbackSolution(ComplaintCategories category) {
        return switch (category) {
            case SERVICE -> "Notre √©quipe service client vous contactera dans les 10 minutes.";
            case NETTOYAGE -> "Un membre du personnel de m√©nage sera d√©p√™ch√© imm√©diatement.";
            case EQUIPEMENT -> "Un technicien interviendra dans les 30 minutes pour v√©rifier l'√©quipement.";
            case RESERVATION -> "Notre gestionnaire de r√©servation vous recontactera sous 5 minutes.";
            case AUTRE -> "Votre demande a √©t√© prioris√©e, un responsable vous contactera rapidement.";
        };
    }

    private String getCategoryLabel(ComplaintCategories category) {
        return switch (category) {
            case SERVICE -> "Service Client";
            case NETTOYAGE -> "Probl√®me de Nettoyage";
            case EQUIPEMENT -> "D√©faillance d'√âquipement";
            case RESERVATION -> "Erreur de R√©servation";
            case AUTRE -> "Autre R√©clamation";
        };
    }
}